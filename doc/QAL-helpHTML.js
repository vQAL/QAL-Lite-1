function includeHelpHTML(){
  var el = document.getElementById("helpDlg");

  // content of innerHTML should be edited in another private file (eg, QAL-aboutDlg-priv.html), and should not contain single quotes ', then \\n is replaced with nothing,
  //   then surrounded by single quotes ''.  This is needed to secure/better obfuscate HTML text (eg, of QAL dialog boxes).

  el.innerHTML = '<div id="tabs-help"><ul>	<li><a href="#tab-whatsnew"><font color="darkblue" size="-1">What&rsquo;s New</font></a></li>	<li><a href="#tab-guide"><font color="darkblue" size="-1">User Guide</font></a></li>	<li><a href="#tab-samples"><font color="darkblue" size="-1">Sample Gates and Algorithms</font></a></li>	<li><a href="#tab-observations"><font color="darkblue" size="-1">Sample Experiments and Observations</font></a></li>	<li><a href="#tab-refs"><font color="darkblue" size="-1">References</font></a></li>	<li><a href="#tab-online"><font color="darkblue" size="-1">Related Online Resources</font></a></li>	<!--TODO: Add more tabs later, eg, on ...--></ul><font size="2" family="Verdana">	<div id="tab-whatsnew" align="justify">		This version of QAL (QAL 0.9) has various improvements over QAL 0.8. These include:		<ul>		<li>Added support for tensor-decomposed heatmaps (TDHMs).		<li>QAL Lite 0.9 is deployed simultaneously with QAL 0.9.  Future QAL Lite versions should follow the same pattern of being deployed simutaneously with the corresponding version of QAL.		</ul>		This version of QAL (QAL 0.8) has various improvements over QAL 0.75. These include:		<ul>		<li>Added button for showing algorithm steps as text (a.k.a., &ldquo;pseudo-program&rdquo;). A step towards presenting circuit diagrams.		<li>Added (temporary) support for &ldquo;gradual magnitudes&rdquo; and &ldquo;gradual phases&rdquo; gates (For a sample application of these gates, see awe-inspiring screenshots for the &lsquo;2023.05.22&rsquo; 5-steps algorithm.)		<li>Activated basic support for Circuit Diagrams.		<li>Activated basic support for NQV-5s and NQV-6s.		<li>Added a histogram presenting final state statistics.		<li>Added a &lsquo;Patents Pending&rsquo; statement next to some QAL features.		<li>Added basic support for a non-unit (i.e., not 1) maximum magnitude, and for modular arithmetic.		<li>Added a &lsquo;Scale&rsquo; button (self-inverse).		<li>Improved support for Integer matrices/operators.		<li>Improved info provided in Step Info, to include info about a step being an isometry, doubly-stochastic, and more.		<li>Added an option to use an advanced or simplified QAL dashboard, one suited for researchers and the other for students, respectively.		<li>Added basic support for optionally composing steps/matrices using elementwise matrix addition, instead of composing them using regular matrix multiplication. Useful for viewing steps/matrices as states/2D game configurations (e.g., Lights Out, Quantor, Red All, ..., etc.)		</ul>		This version of QAL (QAL 0.75) has various improvements over QAL 0.68r. These include:		<ul>		<li>Added a panel for gate buttons, for immediately applying gates to algorithm steps (rather than using dropdown list). Allowed optionally adding buttons for custom gates/permutations to this new panel (via providing an optional acronym for the custom gate/permutation).		<li>Added basic support for NQV-2s (As a modification of NQV-1s that emphasize phases. Check the <tt>NQV-2s</tt> checkbox in <tt>Presentation Settings</tt> with <tt>NQV-1s</tt> turned on. You may also change the size and shape of NQV-2s.)		<li>Added support to change magnitudes and phases of a whole column/ket or row/bra in a gate or of cells/entries of the whole gate.		<li>Added a range slider for displayable (included/excluded) color hues and degrees/lightness (<tt>Color Range</tt>).		<li>Added support for zooming in and zooming out for whole algorithm presentation. (Zooming in/out for specific step presentations is a soon-to-be-added feature.)		<li>Activated support for monochromatic presentations, including for NQV-2s. Added support for single color degree/lightness.		<li>Improved support for presenting states, including in NQV-2s.		<li>Expanded QAL Help and added to it few more sample QAL algorithms and experiments.		<li>Added a general inversion operation for complex matrix/operators in polar representation (in addition to existing adjoint, conjugate, and transpose operations). (Currently extremely sluggish for non-unitary matrices larger than 6x6. Speedy inverse computation, e.g., using Crout decomposition, is planned.)		<li>Due to popular demand, improved support for Rubik&rsquo;s Cube moves.		<li>Added support for the Pocket Cube (a.k.a., 2x2x2 Rubik&rsquo;s Cube).		<li>Various minor UI improvements (like Settings tabs being collapsible, and changing the degree of QAL&rsdquo;s grey background).		<li>Added basic support for &lsquo;.qal&rsquo; QAL File Format files. Files in QAL File Format include textual specifications for permutations, matrices, parallel (i.e., Kronecker) products, and serial/sequential products (i.e., quantum algorithms, as matrix compositions/multiplications).			<ul>			<li>A permutation specification is a non-empty list of non-negative integers (a fixed point can be omitted) bound to a gate name.			<li>A matrix specification is a JSON format string of a two-element array (i.e., pair) of two square arrays (of magnitudes, and phases) bound to a gate name.			<li>A parallel product specification is a non-empty list of gate names bound to a gate name. Named gates are multiplied-in-parallel (Kronecker product). A one-element list is interpreted as the gate named applied to all digits (i.e., kron with itself, for all digits). A one-element list followed by a digit index (a nonnegative integer) is interpreted as the gate named applied to a single digit (i.e., kron with id).			<li>A serial product specification is a non-empty list of gate names (optionally) bound to an algorithm/gate name. Named gates are sequentially composed (matrix/permutation multiplication). Only one of these may be referred to as representing the whole QAL algorithm.			</ul>		<li>Added support for directly applying the Z, S, and T gates (standard quantum gates) to a single digit.		</ul>		Version 0.68r of QAL has various improvements over QAL 0.6. These include:		<ul>		<li>Performance improvements:			<ul>			<li>Multiplication/composition of permutations is handled separately, not as a general matrix multiplication. Allows larger numbers of parts and steps.			</ul>		<li>Added support for adding custom permutations:			<ul>			<li>Enter a custom permutation, as a comma-separated list/sequence of (unique) nonnegative (or positive) integers/whole numbers.  If the numbers in the list are not distinct, the list is parsed as denoting a <i>function</i> (of integers), instead of a permutation. If the list contains a zero, the input is interpreted as zero (0)-based. If not, the input is interpreted as 1-based. If 0 is a fixpoint of a 0-based permutation, it must be explicitly specified (as the first element of the permutation outputs list).  Fixed points/parts of a permutation other than 0 can be specified using an &ldquo;empty number&rdquo; (i.e., two consecutive commas).			</ul>		<li>Added Help (this dialog box).		<li>All symbols and icons now display properly on all supported platforms (let us know if you still have an issue).		<li>Added basic support for integer-only matrices/operators.		<li>In addition to displaying part configurations, a.k.a. states, in the <tt>matrices</tt> presentation in QAL 0.6, basic support for presenting initial (input) and final (output) states, and for presenting intermediate states (as kets/column vectors) in both the <tt>Heatmaps</tt> and <tt>NQV-1s</tt> presentations was added to QAL 0.68.		<ul>		<li>In future QAL versions, <tt>NQV-3s</tt> should display diagrams&mdash;for states&mdash;that are reminiscent of the Dirac notation for quantum states, with its characteristic left and right angle brackets.		<li>For the time being, the input state/configuration to a QAL algorithm is fixed (to state |0&#x3009;in particular). Changes to the &ldquo;input state&rdquo; can be simulated, however, by changing entries/cells of the first column of the first algorithm step (on the far left). The first algorithm step can then be considered a special &ldquo;input state preparation&rdquo; operation/step, and the actual algorithm will then be the steps that follow (i.e., ones having indices 2 to <tt>nsteps</tt>) and the actual input state will then be the state displayed <i>after</i> the first preparatory step.		</ul>		<li>Novel QAL Visual-1s (NQV-1s) are now initially displayed.  Can be turned off in Presentation Settings.		<li>Selection Marks are now initially displayed (but not Parts&rsquo; Symbols).  Can be turned off in Presentation Settings (to decrease clutter, e.g., for a clearer view of heatmaps as paintings/pictures).		<li>Added basic support for Rubik&rsquo;s Cube moves, in particular for F(ront)-face clockwise 90&#x00B0; rotation (F), for U(p)-face wholecube clockwise rotation (Uwc), and for R(ight)-face wholecube clockwise rotation (Rwc), from which all other cube moves can generated. (See also Exercise&nbsp;2 in <tt>QAL Help:Sample Experiments and Observations</tt>.)		</ul>		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.	</div>	<div id="tab-guide" align="justify">		The QAL|Help tab <font color="darkblue" size="-1">User Guide</font> is not available in this version of QAL.  Please contact qal@... for the full-featured version of QAL.		<br>...		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.		<font size="2">		<br><br>		User Guide [draft]...		<p><br>		Disclaimer: <i>As indicated by its version number, QAL is currently a software prototype. QAL has not been thoroughly tested yet. As such, very likely QAL has some (or many?) typos, rough edges, glitches, inaccuracies, and even some (known and unknown) inconsistencies! Further, not all advertised features of QAL are supported in QAL 0.8.  Your feedback and comments on QAL&rsquo;s functionality and appearance, sure to be appreciated, will help improve future versions of QAL and may even influence its development directions.</i>		It should be also noted that since QAL is a web app, it may display and work slightly differently on different devices, depending on used web browser, OS, and screen settings.</p>		<br>		<h4>QAL Goals</h4>		<p>As mentioned in QAL&rsquo;s About dialog box, the ultimate goal behind developing QAL is finding new efficient quantum algorithms. Another main goal of QAL is teaching quantum (computer) programming and related mathematics, such as group theory and linear algebra, in a visual interactive manner. This user guide presents how these goals may be achieved using QAL.</p>		</font>		...		<br>		<h4>Fundamental Concepts and Guiding Principles in QAL</h4>		<ul>		<li>A <i>permutation</i> is simply the reshuffling/rearrangement of a set of objects (a.k.a. &lsquo;parts&rsquo;&mdash;e.g., a deck of cards, the facelets of a Rubik&rsquo;s Cube, or points on the surface of a ball). A finite permutation of <i>n</i> objects is usually denoted by a rearrangement of the set {1 .. <i>n</i>} (using a one-based notation) or the set {0 .. <i>n-1</i>} (using a zero-based notation). (The ability to label shuffled parts using symbols or strings, i.e., using non-integers, is a planned addition to future versions of QAL.)		<br><br>		<li>For the purposes of quantum informatics (and thus quantum programming and quantum algorithms), a <i>complex number</i> is best viewed not as a pair of a real part and an imaginary part (i.e., not using the Cartesian representation of complex numbers) but as a pair of a non-negative real number (called the <I>modulus</I> or <I>magnitude</I> of the complex number) and an a real number in the range -&#x03C0; to &#x03C0; (called the <I>argument</I> or the <I>phase</I> of the complex number), i.e., using the polar representation of complex numbers [PCM, p.18]. Complex infinity and zero have no phase (i.e., their phase is meaningless) and while zero is very important for quantum computation but infinity is rarely useful (if ever).  As such, only finite complex numbers (i.e., ones with a finite modulus) are useful for quantum informatics. In fact, <I>bounded</I> complex numbers (i.e., ones whose modulus is guaranteed to not exceed a fixed finite real value, typically 1) are of most interest.		<br><br>		<li>A main fundamental guiding principle of QAL is that <b>quantum gates are generalizations of permutations</b>. This principle cannot be repeated well enough. Let it sink in.		<li>Once again, a main fundamental guiding principle of QAL is that quantum gates are generalizations of permutations. This principle cannot be repeated well enough.		<li>Finally, a main fundamental guiding principle of QAL is that quantum gates are generalizations of permutations. This principle cannot be repeated well enough!		<br><br>		<li>A quantum gate simply generalizes a permutation in the same way as (i.e., analogous to) how binary numbers are generalized to bounded complex numbers (in polar representation).		<ul>		<li><b>MATH-Warning!</b> Those mathematically-inclined may like to consider BNZQRC as the gradual step-by-step generalization from binary numbers (B) to whole numbers (N) to integers (Z) to rationals (Q) to reals (R) to complex numbers (C).  In QAL this generalization sequence is shortened, where a binary number (which can have just either the value zero or the value one) is simply viewed as generalized in two directions: first, by having a <i>phase</i> attached to it (i.e., has a real number, in radians, between -&#x03C0; and &#x03C0;&mdash;or 0 to 2&#x03C0;&mdash;attached to it) and, second, by the number (as the <i>modulus</i>) being allowed to take any nonnegative real number between 0 and 1 (inclusive, where 1 is chosen as the standard fixed positive upper bound).		</ul>		<li>A quantum gate/operation is represented in QAL as a square matrix (of size <tt>#parts</tt> &times; <tt>#parts</tt>) of bounded complex numbers. Matrix multiplication represents the composition of quantum operations.		<li>A quantum algorithm is represented in QAL by a sequence (of length <tt>#steps</tt>) of quantum gates.  The composition of the gates of an algorithm (from left to right, in most cases) gives the overall operation of the algorithm.		<li>The way a quantum algorithm is represented in QAL is an extension of how a quantum gate generalizes a permutation in QAL. A sequence of permutations/moves (e.g., of a Rubik&rsquo;s Cube) is a &lsquo;permutations algorithm&rsquo; (i.e., is a classical reversible computation [RevComp]). Analogously, a sequence of quantum gates is a quantum algorithm (i.e., a quantum computation), and is a generalization of a classical reversible computation.  This situation can be described by the following (category-theoretic) diagram.<br>		<center><IMG SRC="doc/images/perm-qgate-revalg-qalg.svg" ALT="Permutation-QGate-ReversibleAlg-QAlg" BORDER=10></center>		<h4>Visualization and Interaction</h4>		<li><b>Visualization</b>:  More on visualization and interactivity in QAL to come later. (TODO: See QAL-VisInteraction.html)		<li><b>Interactivity</b>: Another main feature of QAL is that the kinds of diagrams (a.k.a. presentations) presenting a quantum algorithm are <i>not</i> static but can be changed dynamically by the QAL user, and the effect of changes in one diagram are reflected immediately (or almost immediately, depending on algorithm size) in the other diagrams, and, more importantly, is reflected in the diagrams representing the overall operation of the composite quantum algorithm (typically presented on the far right). This interactivity allows for experimentation in QAL, and for making a smooth transition from one quantum operation to another. In other words, like interaction in other software and apps, interactivity in QAL allows the QAL user to see in color (in multiple presentations) the effect of (small or big) changes in the steps of an algorithm on the overall algorithm.		<br>(For starters, try playing with&mdash;i.e., dragging to the right and to the left&mdash;the <tt>Magnitude</tt> slider and the <tt>Phase</tt> slider of QAL (in <tt>Current Selection Settings</tt>). Try also changing the currently <tt>Selected Cell</tt> by clicking on other cells, then doing some changes to that cell&rsquo;s phase and magniture. While making those changes, keep an eye on the diagrams to the far right representing the overall operation of the algorithm. [A <i>cell</i> in a QAL diagram visually represents a matrix entry.])		<!--In order to fully understand any piece of mathematics (seemingly possible!) you have to understand all of mathematics (i.e., mathematics in full; seemingly impossible!)-->		<!--Processes/operations first. Matrices, not vectors, are the center of attention in QAL (as in ZX-calculus for example?). Vectors are linear combinations of matrices columns/rows. kets -> cols. Bras -> rows.-->		<li><b>Colormaps</b>:		<center><IMG SRC="doc/images/StdCmap.png" ALT="Standard Colormap" BORDER=1></center>		More later...TODO		<h4>QAL Selections</h4>		<li>Selected Cells: <tt>Current Selection Settings</tt>		<li>Subalgorithms: <tt>(Subalgorithm) Selection Marks</tt>		<li>More later...TODO		</ul>		<h4>Linear Operator/Matrix Types</h4>		<li>While no classification of matrices (a.k.a., linear maps) can be exhaustive, different kinds of matrices/linear transformations are relevant to QAL. More on this later...<br>		<center><IMG SRC="doc/images/QAL-operator-matrix-kinds.svg" ALT="Operator/Matrix-Kinds" BORDER=10></center>		<h4>QAL Usage Tips</h4>		<ul>		<li>Hovering (with the mouse) over most QAL controls displays a tooltip having more information about the function of the control.		<li>Double-click or click twice on the subalgorithm mark of the first step (to make it the only step in the subalgorithm), then click on marks for following steps <i>in sequence</i>. This allows you to see the development of the overall matrix of your algorithm in a step-by-step fashion.		<ul>		<br>...		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.	</div>	<div id="tab-samples" align="justify">		The QAL|Help tab <font color="darkblue" size="-1">Sample Gates and Algorithms</font> is not available in this version of QAL.  Please contact qal@... for the full-featured version of QAL.		<br>...		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.	</div>	<div id="tab-observations" align="justify">		The QAL|Help tab <font color="darkblue" size="-1">Sample Experiments and Observations</font> is not available in this version of QAL.  Please contact qal@... for the full-featured version of QAL.		<br>...		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.	</div>	<div id="tab-refs" align="justify">		The QAL|Help tab <font color="darkblue" size="-1">References</font> is not available in this version of QAL.  Please contact qal@... for the full-featured version of QAL.		<h3>References [draft] ...</h3>		<h4>Quantum Computing Refs</h4>		<ul>		<li>...		</ul>		<h4>General Math Refs</h4>		<ul>		<li>...		</ul>		<h4>Puzzle Refs</h4>		<ul>		<li>...		</ul>		<h4>Group Theory Refs</h4>		<ul>		<li>...		</ul>		<h4>Graph Theory Refs</h4>		<ul>		<li>...		</ul>		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.	</div>	<div id="tab-online" align="justify">		The QAL|Help tab <font color="darkblue" size="-1">Related Online Resources</font> is not available in this version of QAL.  Please contact qal@... for the full-featured version of QAL.		<h3>Related Online Resources [draft] ...</h3>		<h4>Relevant Webpages</h4>		<ul>		<li>...		</ul>		<h4>Other Online QAL-related Material</h4>		<ul>		<li>...		</ul>		<h4>Online Videos</h4>		<ul>		<li>...		</ul>		<br>&copy; 2022-2023 Moez A. AbdelGawad. All rights reserved.	</div>	<!--div id="tab-..." align="justify">	</div--></font></div>';
}